            Введение
Дерево — это популярная структура данных, нелинейная по своей природе. В отличие от других структур данных, таких как
массив, стек, очередь и связанный список, которые имеют линейный характер, дерево представляет собой иерархическую
структуру. Информация о порядке дерева не важна. Дерево содержит узлы и 2 указателя. Эти два указателя являются левым
дочерним и правым дочерними элементами родительского узла.

Корень: корень дерева — это самый верхний узел дерева, у которого нет родительского узла. В каждом дереве есть только
один корневой узел.
Ребро: ребро выступает в качестве связующего звена между родительским узлом и дочерним узлом.
Лист: узел, у которого нет дочерних элементов, называется листовым узлом. Это последний узел дерева. В дереве может быть
несколько листовых узлов.
Поддерево: поддерево узла — это дерево, рассматривающее этот конкретный узел как корневой узел.
Глубина: Глубина узла — это расстояние от корневого узла до этого конкретного узла.
Высота: высота узла — это расстояние от этого узла до самого глубокого узла этого поддерева.
Высота дерева: Высота дерева — это максимальная высота любого узла. Это то же самое, что и высота корневого узла

Зачем использовать деревья?

1. Одна из причин использования деревьев может заключаться в том, что вы хотите хранить информацию, которая естественным
образом образует иерархию. Например, файловая система на компьютере.
2. Деревья (с некоторым упорядочением, например, BST) обеспечивают умеренный доступ/поиск (быстрее, чем связанный список,
и медленнее, чем массивы).
3. Деревья обеспечивают умеренную вставку/удаление (быстрее, чем массивы, и медленнее, чем неупорядоченные связанные
списки).
4. Подобно связанным спискам и в отличие от массивов, деревья не имеют верхнего предела количества узлов, поскольку узлы
связаны с помощью указателей.

К основным сферам применения деревьев относятся:

Работа с иерархическими данными.
Упростите поиск информации (см. обход дерева).
Управление отсортированными списками данных.
В качестве рабочего процесса для компоновки цифровых изображений для визуальных эффектов.
Алгоритмы маршрутизатора
Форма многоступенчатого принятия решений (см. деловые шахматы).

                Свойства бинарного дерева
1) Максимальное количество узлов на уровне l бинарного дерева равно 2^l .
Здесь уровень — это количество узлов на пути от корня к узлу (включая корень и узел). Уровень корня равен 0.
2) Максимальное количество узлов в бинарном дереве высоты 'h' равно 2^h – 1 .
Здесь высота дерева — это максимальное количество узлов на пути от корня до листа. Высота дерева с одним узлом считается
равной 1.
3) В двоичном дереве с N узлами минимально возможная высота или минимальное количество уровней составляет Log 2 (N+1).
На каждом уровне должен быть хотя бы один элемент, поэтому высота не может быть больше N. Двоичное дерево высоты «h»
может иметь максимум 2^h – 1 узлов (предыдущее свойство). Таким образом, количество узлов будет меньше или равно этому
максимальному значению.
4)Двоичное дерево с L листьями имеет не менее | Log2L |+ 1  уровень.
Двоичное дерево имеет максимальное количество листьев (и минимальное количество уровней), когда все уровни полностью
заполнены. Пусть все листья находятся на уровне l, тогда ниже верно число листьев L.
5) В двоичном дереве, где каждый узел имеет 0 или 2 дочерних элемента, количество листовых узлов всегда на один больше,
чем узлов с двумя дочерними элементами.
6) В непустом бинарном дереве, если n — общее количество узлов, а e — общее количество ребер, то e = n-1.

                Типы бинарного дерева
Полное (full) бинарное дерево — это особый тип бинарного дерева, в котором каждый родительский узел/внутренний узел имеет либо
двух дочерних элементов, либо ни одного. Он также известен как правильное бинарное дерево.
               18                      18                      18
           /       \                 /    \                 /     \
         15         30             15     20              40       30
        /  \        /  \          /  \                            /  \
      40    50    100   40      40    50                        100   40
                              /   \
                             30   50

Заполненное двоичное дерево: -
Двоичное дерево является заполненным (Complete) двоичным деревом, если все уровни полностью заполнены, за исключением,
возможно, последнего уровня, а на последнем уровне все ключи оставлены максимально возможным образом.

Заполненное бинарное дерево похоже на полное бинарное дерево, но с двумя основными отличиями:

Каждый уровень должен быть полностью заполнен
Все элементы листа должны наклоняться влево.
У последнего листового элемента может не быть правильного родственного элемента, т. е. заполненное бинарное дерево не
обязательно должно быть полным бинарным деревом.
Ниже приведен пример заполненного двоичного дерева.

               18
           /       \
         15         40
        /  \        /  \
       4    17    30   400
     /  \   /
    8   7  16

Идеальное бинарное дерево: -
это тип бинарного дерева, в котором каждый внутренний узел имеет ровно два дочерних узла,
а все конечные узлы находятся на одном уровне.

               18
           /       \
         15         30
        /  \        /  \
      40    50    100   40


Сбалансированное двоичное дерево.
Двоичное дерево является сбалансированным, если высота дерева равна O (Log n), где n — количество узлов. Например,
дерево AVL поддерживает высоту O(Log n), следя за тем, чтобы разница между высотами левого и правого поддеревьев не
превышала 1. Красно-черные деревья поддерживают высоту O(Log n), следя за тем, чтобы число  черных узлов на
каждом пути от корня к листу одинаково, и нет соседних красных узлов. Сбалансированные деревья двоичного поиска хороши
с точки зрения производительности, поскольку они обеспечивают время O (log n) для поиска, вставки и удаления.
АВЛ — аббревиатура, образованная первыми буквами создателей (советских учёных) Адельсон-Вельского Георгия Максимовича
и Ландиса Евгения Михайловича.
                              76
                    /                   \
                   3                   108
              /         \             /     \
             1          -13          15     205
           /   \                          /    \
          5      5                      205     205








      10                                           10
      /                                             \
    20                                               20
    /                                                 \
  30                                                   30
  /                                                     \
 40                                                      40
Двоичное дерево с наклоном влево                Двоичное дерево с наклоном вправо

                        Красно-чёрное дерево
Красно-чёрное дерево (англ. red-black tree, RB tree) — один из видов самобалансирующихся двоичных деревьев поиска,
гарантирующих логарифмический рост высоты дерева от числа узлов и позволяющее быстро выполнять основные операции дерева
поиска: добавление, удаление и поиск узла. Сбалансированность достигается за счёт введения дополнительного атрибута узла
дерева — «цвета». Этот атрибут может принимать одно из двух возможных значений — «чёрный» или «красный».
Красно-чёрное дерево используется для организации сравнимых данных, таких как фрагменты текста или числа. Листовые узлы
красно-чёрных деревьев не содержат данных, благодаря чему не требуют выделения памяти — достаточно записать в
узле-предке в качестве указателя на потомка нулевой указатель. Однако в некоторых реализациях для упрощения алгоритма
могут использоваться явные листовые узлы.
Пример TreeMap, TreeSet
                              13
                    /                   \
                   8                     17
              /         \         /            \
             1          11       15            25
          /     \     /    \    /  \        /       \
        null     6  null  null null null  22        27
               /   \                    /   \      /   \
             null  null             null  null   null  null

	            В среднем	В худшем случае
Расход памяти	O(n)	    O(n)
Поиск	        O(log n)	O(log n)
Вставка	        O(log n)	O(log n)
Удаление	    O(log n)	O(log n)

                    B-дерево
B-дерево (по-русски произносится как Би-дерево) — структура данных, дерево поиска. С точки зрения внешнего логического
представления — сбалансированное, сильно ветвистое дерево. Часто используется для хранения данных во внешней памяти.
Структура B-дерева применяется для организации индексов во многих современных СУБД.


                  A - K - Z   // "Rori"
              a- h  e -k  l- r   s - z